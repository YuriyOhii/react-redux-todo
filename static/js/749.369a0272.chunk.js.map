{"version":3,"file":"static/js/749.369a0272.chunk.js","mappings":"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","sources":["components/StatusFilter/StatusFilter.styled.js","redux/constants.js","redux/filter/selectors.js","components/StatusFilter/StatusFilter.jsx","components/TaskCounter/TaskCounter.styled.js","redux/tasks/selectors.js","components/TaskCounter/TaskCounter.jsx","components/TaskBar/TaskBar.styled.js","components/TaskBar/TaskBar.jsx","components/TaskForm/TaskForm.styled.js","components/TaskForm/TaskForm.jsx","components/Task/Task.styled.js","components/Task/Task.jsx","components/TaskList/TaskList.styled.js","components/TaskList/TaskList.jsx","pages/TasksPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 4px;\n`;\n","export const STATUSFILTERS = Object.freeze({\n  all: 'all',\n  completed: 'completed',\n  active: 'active',\n});\n","export const selectFilter = state => state.filter.status;\n","import { Button } from 'components/Button/Button';\nimport { Wrapper } from './StatusFilter.styled';\nimport { STATUSFILTERS } from '../../redux/constants';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filtersSlice';\n\nexport const StatusFilter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <Wrapper>\n      <Button\n        type=\"button\"\n        onClick={() => dispatch(setFilter('all'))}\n        selected={filter === STATUSFILTERS.all}\n      >\n        All\n      </Button>\n      <Button\n        type=\"button\"\n        onClick={() => dispatch(setFilter('active'))}\n        selected={filter === STATUSFILTERS.active}\n      >\n        Active\n      </Button>\n      <Button\n        type=\"button\"\n        onClick={() => dispatch(setFilter('completed'))}\n        selected={filter === STATUSFILTERS.completed}\n      >\n        Completed\n      </Button>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Text = styled.p`\n  margin: 0;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { STATUSFILTERS } from '../constants';\nimport { selectFilter } from '../filter/selectors';\nexport const selectItems = state => state.tasks.items;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n\nexport const selectVisibleTasks = createSelector(\n  [selectItems, selectFilter],\n  (tasks, filter) => {\n    switch (filter) {\n      case STATUSFILTERS.active:\n        return tasks.filter(el => !el.completed);\n      case STATUSFILTERS.completed:\n        return tasks.filter(el => el.completed);\n      default:\n        return tasks;\n    }\n  }\n);\n\nexport const selectTasksCount = createSelector([selectItems], tasks => {\n  const count = tasks.reduce(\n    (acc, task) => {\n      if (task.completed) {\n        acc.completed += 1;\n      } else {\n        acc.active += 1;\n      }\n      return acc;\n    },\n    { active: 0, completed: 0 }\n  );\n  return count;\n});\n","import { Text } from './TaskCounter.styled';\nimport { selectTasksCount } from '../../redux/tasks/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const TaskCounter = () => {\n  const count = useSelector(selectTasksCount);\n  return (\n    <div>\n      <Text>Active: {count.active}</Text>\n      <Text>Completed: {count.completed}</Text>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.header`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nexport const Section = styled.section`\n  display: grid;\n  gap: 4px;\n`;\n\nexport const Title = styled.h2`\n  margin: 0;\n  font-size: 16px;\n`;\n","import { StatusFilter } from 'components/StatusFilter/StatusFilter';\nimport { TaskCounter } from 'components/TaskCounter/TaskCounter';\nimport { Section, Wrapper, Title } from './TaskBar.styled';\n\nexport const TaskBar = () => {\n  return (\n    <Wrapper>\n      <Section>\n        <Title>Tasks</Title>\n        <TaskCounter />\n      </Section>\n      <Section>\n        <Title>Filter by status</Title>\n        <StatusFilter />\n      </Section>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 4px;\n  margin-bottom: 20px;\n`;\nexport const Field = styled.input`\n  flex-grow: 1;\n  padding: 8px;\n  font: inherit;\n  &:focus {\n    outline-color: #1976d2;\n  }\n`;\n","import { Button } from 'components/Button/Button';\nimport { Field, Form } from './TaskForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\n\nexport const TaskForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    dispatch(addTask(form.elements.text.value));\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={e => handleSubmit(e)}>\n      <Field type=\"text\" name=\"text\" placeholder=\"Enter task text...\" />\n      <Button type=\"submit\">Add task</Button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px 0;\n`;\n\nexport const Text = styled.p`\n  flex-grow: 1;\n`;\n\nexport const Btn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  margin: 0;\n  border: none;\n  border-radius: 4px;\n  background-color: transparent;\n  cursor: pointer;\n  color: #f44336;\n  &:hover {\n    background-color: #e2e5e8;\n  }\n  &:active {\n    background-color: #bdbdbd;\n  }\n`;\n\nexport const Checkbox = styled.input`\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n`;\n","import { MdClose } from 'react-icons/md';\nimport { Btn, Text, Wrapper } from './Task.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask, toggleIsCompleted } from 'redux/tasks/operations';\n\nexport const Task = ({ task }) => {\n  const dispatch = useDispatch();\n  const handleClick = id => {\n    dispatch(deleteTask(id));\n  };\n  const handleChange = task => {\n    dispatch(toggleIsCompleted(task));\n  };\n  return (\n    <Wrapper>\n      <input\n        onChange={() => handleChange(task)}\n        type=\"checkbox\"\n        checked={task.completed}\n      />\n      <Text>{task.text}</Text>\n      <Btn onClick={() => handleClick(task.id)}>\n        <MdClose size={24} />\n      </Btn>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\n  &:not(:last-of-type) {\n    border-bottom: 1px solid #2f2f37;\n  }\n`;\n","import { Task } from 'components/Task/Task';\nimport { List, ListItem } from './TaskList.styled';\nimport { selectVisibleTasks } from '../../redux/tasks/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const TaskList = () => {\n  const visibleTasks = useSelector(selectVisibleTasks);\n  return (\n    <List>\n      {visibleTasks.map(task => (\n        <ListItem key={task.id}>\n          <Task task={task} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import { TaskBar } from 'components/TaskBar/TaskBar';\nimport { TaskForm } from 'components/TaskForm/TaskForm';\nimport { TaskList } from 'components/TaskList/TaskList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchTasks } from 'redux/tasks/operations';\n\nexport default function TasksPage() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    console.log('fetching tasks');\n    dispatch(fetchTasks());\n  }, [dispatch]);\n  return (\n    <div>\n      <TaskBar />\n      <TaskForm />\n      <TaskList />\n    </div>\n  );\n}\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","STATUSFILTERS","Object","freeze","all","completed","active","selectFilter","state","filter","status","StatusFilter","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","Button","type","onClick","setFilter","selected","Text","selectItems","tasks","items","selectVisibleTasks","createSelector","el","selectTasksCount","reduce","acc","task","TaskCounter","count","Section","_templateObject2","Title","_templateObject3","TaskBar","Form","Field","TaskForm","onSubmit","e","event","preventDefault","form","target","addTask","elements","text","value","reset","handleSubmit","name","placeholder","Btn","Task","_templateObject4","_ref","onChange","toggleIsCompleted","handleChange","checked","id","deleteTask","MdClose","size","List","ListItem","TaskList","visibleTasks","map","TasksPage","useEffect","console","log","fetchTasks"],"sourceRoot":""}